#spring.shardingsphere.datasource.names=m1,m2
#spring.shardingsphere.datasource.m1.type=com.alibaba.druid.pool.DruidDataSource
#spring.shardingsphere.datasource.m1.driver-class-name=com.mysql.cj.jdbc.Driver
#spring.shardingsphere.datasource.m1.url=jdbc:mysql://127.0.0.1:3306/jwk-demo?useUnicode=true&characterEncoding=utf-8&serverTimezone=Asia/Shanghai&allowMultiQueries=true&rewriteBatchedStatements=true&useSSL=false
#spring.shardingsphere.datasource.m1.username=root
#spring.shardingsphere.datasource.m1.password=Awert159
#
#spring.shardingsphere.datasource.m2.type=com.alibaba.druid.pool.DruidDataSource
#spring.shardingsphere.datasource.m2.driver-class-name=com.mysql.cj.jdbc.Driver
#spring.shardingsphere.datasource.m2.url=jdbc:mysql://127.0.0.1:3306/jwk-demo1?useUnicode=true&characterEncoding=utf-8&serverTimezone=Asia/Shanghai&allowMultiQueries=true&rewriteBatchedStatements=true&useSSL=false
#spring.shardingsphere.datasource.m2.username=root
#spring.shardingsphere.datasource.m2.password=Awert159
#spring.main.allow-bean-definition-overriding=true
##
## 广播表，所有分片库分片表全部同步
##spring.shardingsphere.sharding.broadcast-tables=user
##
## 两个表绑定
##spring.shardingsphere.sharding.binding-tables[0]=user,user_extend
##
## 主从
##spring.shardingsphere.sharding.master-slave-rules.ds0.master-data-source-name=m1
##spring.shardingsphere.sharding.master-slave-rules.ds0.slave-data-source-names[0]=m2
##spring.shardingsphere.sharding.tables.user.actual-data-nodes=ds0
##
##
##----------------------------------------------------------------
##
##分表 user_$->{1..2} = user_1 user_2
#spring.shardingsphere.sharding.tables.user.actual-data-nodes=m1.user_$->{1..2}
##主键列
#spring.shardingsphere.sharding.tables.user.key-generator.column=id
##主键策略：雪花算法
#spring.shardingsphere.sharding.tables.user.key-generator.type=SNOWFLAKE
#spring.shardingsphere.sharding.tables.user.key-generator.props.worker.id=1
#
###分片策略
##分片id
#spring.shardingsphere.sharding.tables.user.table-strategy.inline.sharding-column=id
##分片策略 user_$->{id%2+1}  =   user_1 or user_2
#spring.shardingsphere.sharding.tables.user.table-strategy.inline.algorithm-expression= user_$->{id%2+1}
###打印sql
##spring.shardingsphere.props.sql.show = true
##
##----------------------------------------------------------------
##
##
###分库分表
###分表 user_$->{1..2} = user_1 user_2
##spring.shardingsphere.sharding.tables.user.actual-data-nodes=m$->{1..2}.user_$->{1..2}
###主键列
##spring.shardingsphere.sharding.tables.user.key-generator.column=id
###主键策略：雪花算法
##spring.shardingsphere.sharding.tables.user.key-generator.type=SNOWFLAKE
##spring.shardingsphere.sharding.tables.user.key-generator.props.worker.id=1
##
####分片策略 - inline（表达式）
###分片id
##spring.shardingsphere.sharding.tables.user.table-strategy.inline.sharding-column=id
###分片策略 user_$->{id%2+1}  =   user_1 or user_2
##spring.shardingsphere.sharding.tables.user.table-strategy.inline.com.jwk.shardingjdbc.algorithm-expression= user_$->{id%2+1}
##spring.shardingsphere.sharding.tables..user.database-strategy.inline.sharding-column=id
##spring.shardingsphere.sharding.tables..user.database-strategy.inline.com.jwk.shardingjdbc.algorithm-expression=m$->{id%2+1}
###打印sql
##spring.shardingsphere.props.sql.show = true
##
##
##----------------------------------------------------------------
##
##
###分库分表
###分表 user_$->{1..2} = user_1 user_2
##spring.shardingsphere.sharding.tables.user.actual-data-nodes=m$->{1..2}.user_$->{1..2}
###主键列
##spring.shardingsphere.sharding.tables.user.key-generator.column=id
###主键策略：雪花算法
##spring.shardingsphere.sharding.tables.user.key-generator.type=SNOWFLAKE
##spring.shardingsphere.sharding.tables.user.key-generator.props.worker.id=1
##
####分片策略 - standard（类自定义）
###分片id
##spring.shardingsphere.sharding.tables.user.table-strategy.standard.sharding-column=id
##
### 表范围
##spring.shardingsphere.sharding.tables.user.table-strategy.standard.range-com.jwk.shardingjdbc.algorithm-class-name=com.jwk.shardingjdbc.JwkTableRangeAlgorithm
### 精确表
##spring.shardingsphere.sharding.tables.user.table-strategy.standard.precise-com.jwk.shardingjdbc.algorithm-class-name=com.jwk.shardingjdbc.JwkTablePreciseAlgorithm
##
###分片id
##spring.shardingsphere.sharding.tables.user.database-strategy.standard.sharding-column=id
### 库范围
##spring.shardingsphere.sharding.tables.user.database-strategy.standard.range-com.jwk.shardingjdbc.algorithm-class-name=com.jwk.shardingjdbc.JwkDBRangeAlgorithm
### 精确库
##spring.shardingsphere.sharding.tables.user.database-strategy.standard.precise-com.jwk.shardingjdbc.algorithm-class-name=com.jwk.shardingjdbc.JwkDBPreciseAlgorithm
##
###打印sql
##spring.shardingsphere.props.sql.show = true
##
##
##----------------------------------------------------------------
##
##
###分库分表
###分表 user_$->{1..2} = user_1 user_2
##spring.shardingsphere.sharding.tables.user.actual-data-nodes=m$->{1..2}.user_$->{1..2}
###主键列
##spring.shardingsphere.sharding.tables.user.key-generator.column=id
###主键策略：雪花算法
##spring.shardingsphere.sharding.tables.user.key-generator.type=SNOWFLAKE
##spring.shardingsphere.sharding.tables.user.key-generator.props.worker.id=1
##
####分片策略 - standard（类自定义）
###分片id
##spring.shardingsphere.sharding.tables.user.table-strategy.complex.sharding-columns=id,age
##
### 表范围
###spring.shardingsphere.sharding.tables.user.table-strategy.standard.range-com.jwk.shardingjdbc.algorithm-class-name=com.jwk.shardingjdbc.JwkTableRangeAlgorithm
### 精确表
##spring.shardingsphere.sharding.tables.user.table-strategy.complex.com.jwk.shardingjdbc.algorithm-class-name=com.jwk.shardingjdbc.JwkTableComplexAlgorithm
##
###分片id
##spring.shardingsphere.sharding.tables.user.database-strategy.standard.sharding-column=id
### 库范围
##spring.shardingsphere.sharding.tables.user.database-strategy.standard.range-com.jwk.shardingjdbc.algorithm-class-name=com.jwk.shardingjdbc.JwkDBRangeAlgorithm
### 精确库
##spring.shardingsphere.sharding.tables.user.database-strategy.standard.precise-com.jwk.shardingjdbc.algorithm-class-name=com.jwk.shardingjdbc.JwkDBPreciseAlgorithm
##
###打印sql
##spring.shardingsphere.props.sql.show = true
##
#jwk.dbs.enable=true
# mysql配置
spring.datasource.url=jdbc:mysql://127.0.0.1:3306/jcloud?useUnicode=true&characterEncoding=utf-8&serverTimezone=Asia/Shanghai&allowMultiQueries=true&rewriteBatchedStatements=true&useSSL=false&allowPublicKeyRetrieval=true
spring.datasource.username=root
spring.datasource.password=awert159
spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver
#连接池初始化大小
spring.datasource.druid.initial-size=5
#最小空闲连接数
spring.datasource.druid.min-idle=10
#最大连接数
spring.datasource.druid.max-active=20
#不统计这些请求数据
spring.datasource.druid.web-stat-filter.exclusions=*.js,*.gif,*.jpg,*.png,*.css,*.ico,/druid/*
#访问监控网页的登录用户名和密码
spring.datasource.druid.stat-view-servlet.login-username=druid
spring.datasource.druid.stat-view-servlet.login-password=druid
#mybatis配置文件
#mybatis-plus.config-location=classpath:mybatis-config.xml
#dao层xml路径
mybatis-plus.mapper-locations=classpath*:com/jwk/down/web/dao/*.xml
#mybatis-plus.mapper-locations=classpath:com/jwk/*/web/dao/*.xml
# 开启驼峰命名法,数据库表与实体类属性的驼峰命名自动转换
mybatis-plus.configuration.map-underscore-to-camel-case=true
# SQL查询超时时间(单位：秒)
mybatis-plus.configuration.default-statement-timeout=15
# 关闭图标打印
mybatis-plus.global-config.banner=false
